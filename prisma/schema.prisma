// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MediaContact {
  id                    String   @id @default(uuid())
  name                  String
  title                 String
  bio                   String?
  email                 String   @unique
  email_verified_status Boolean  @default(false)
  socials               String[] // Array of social media links/handles
  authorLinks           String[] // Array of author links (articles, blogs, etc.)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relationships (Many-to-Many)
  outlets   Outlet[]  @relation("MediaContactOutlets")
  countries Country[] @relation("MediaContactCountries")
  beats     Beat[]    @relation("MediaContactBeats")

  @@index([updated_at])
  @@index([name])
  @@index([email_verified_status])
  @@map("media_contacts")
}

model Outlet {
  id          String   @id @default(uuid())
  name        String   @unique // Assuming outlet names should be unique
  description String?
  website     String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relationships
  publisher     Publisher?     @relation("PublisherOutlets", fields: [publisherId], references: [id])
  publisherId   String?
  mediaContacts MediaContact[] @relation("MediaContactOutlets")
  categories    Category[]     @relation("OutletCategories")

  @@map("outlets")
}

model Region {
  id           String    @id @default(uuid())
  name         String    @unique
  code         String    @unique // e.g., 'AF', 'WAS', 'EU', 'BRICS'
  category     String    // 'continent', 'subregion', 'economic', 'political', 'other'
  parent_code  String?   // For subregions
  description  String?   // Optional description
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  
  // Relationships
  countries    Country[] @relation("CountryRegions") // Updated relation name
  
  @@index([parent_code])
  @@map("regions")
}

model Language {
  id         String    @id @default(uuid())
  name       String    @unique // e.g., 'English', 'French', 'Spanish'
  code       String    @unique // ISO 639-1 code e.g., 'en', 'fr', 'es'
  countries  Country[] @relation("CountryToLanguage")
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@map("languages")
}

model Country {
  id           String         @id @default(uuid())
  name         String         @unique
  code         String?        @unique // ISO 3166-1 alpha-2 code
  phone_code   String?        // International dialing code
  capital      String?
  // subregion field removed, will be handled by Region model with category 'subregion'
  latitude     Float?         // For mapping purposes
  longitude    Float?         // For mapping purposes
  flag_emoji   String?        // Country flag emoji
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  
  // Relationships
  regions      Region[]       @relation("CountryRegions") // Many-to-many with Region
  languages    Language[]     @relation("CountryToLanguage")
  mediaContacts MediaContact[] @relation("MediaContactCountries")

  @@map("countries")
}

model Beat {
  id          String   @id @default(uuid())
  name        String   @unique // Beat names should be unique
  description String? // As per PRD: "each beat also having a description"
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relationships (Many-to-Many)
  mediaContacts MediaContact[] @relation("MediaContactBeats")
  categories    Category[]     @relation("BeatCategories")

  @@map("beats")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique // e.g., "Technology", "Business", "Health"
  description String?  // Optional description of the category
  color       String?  // Optional color for UI theming (e.g., "#3B82F6")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relationships (Many-to-Many)
  beats   Beat[]   @relation("BeatCategories")
  outlets Outlet[] @relation("OutletCategories")

  @@map("categories")
}

model Publisher {
  id          String   @id @default(uuid())
  name        String   @unique // Publisher name should be unique
  description String?  // Optional description of the publisher
  website     String?  // Publisher's main website
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relationships (One-to-Many)
  outlets Outlet[] @relation("PublisherOutlets")

  @@map("publishers")
}

enum Role {
  ADMIN
  USER
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  emailVerified  DateTime?
  hashedPassword String
  image          String?
  role           Role     @default(USER)

  accounts       Account[]
  sessions       Session[]
  activityLogs   ActivityLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model DashboardMetric {
  id          String   @id @default(uuid())
  metricType  String   // 'total_contacts', 'total_publishers', etc.
  value       Int
  date        DateTime @default(now())
  metadata    Json?    // Additional context data
  
  @@map("dashboard_metrics")
  @@index([metricType, date])
}

model ActivityLog {
  id          String   @id @default(uuid())
  type        String   // 'create', 'update', 'delete', 'import', 'export'
  entity      String   // 'media_contact', 'outlet', 'publisher', etc.
  entityId    String   // ID of the affected entity
  entityName  String   // Human-readable name of the entity
  userId      String   // User who performed the action
  details     Json?    // Additional details about the action
  timestamp   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id])
  
  @@map("activity_logs")
  @@index([timestamp])
  @@index([type, entity])
  @@index([userId])
}

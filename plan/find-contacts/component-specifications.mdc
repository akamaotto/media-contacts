# Component Specifications - Find Contacts with AI

## Overview
This document provides detailed specifications for all frontend components required for the Find Contacts with AI feature, following the existing design system and component patterns.

## Design System Integration

### Theme Extensions
```typescript
// src/styles/globals.css - Additional theme variables
:root {
  /* AI Feature Colors */
  --ai-primary: 99 102 241;        /* Indigo */
  --ai-primary-foreground: 255 255 255;
  --ai-secondary: 238 242 255;     /* Light Indigo */
  --ai-secondary-foreground: 30 58 138;
  --ai-accent: 165 180 252;        /* Light Indigo */
  --ai-accent-foreground: 30 41 59;
  --ai-success: 34 197 94;         /* Green */
  --ai-warning: 251 146 60;        /* Orange */
  --ai-error: 239 68 68;           /* Red */
  
  /* Progress Colors */
  --progress-bg: 229 231 235;
  --progress-fill: 99 102 241;
  --progress-secondary: 165 180 252;
  
  /* Confidence Score Colors */
  --confidence-high: 34 197 94;    /* Green (80-100%) */
  --confidence-medium: 251 146 60;  /* Orange (50-79%) */
  --confidence-low: 239 68 68;     /* Red (0-49%) */
}
```

### Custom Components Directory
```
src/components/features/ai/
├── index.ts                    # Export barrel
├── find-contacts/
│   ├── index.ts                # Feature exports
│   ├── components/
│   │   ├── find-contacts-button.tsx
│   │   ├── find-contacts-modal.tsx
│   │   ├── search-form.tsx
│   │   ├── country-selector.tsx
│   │   ├── category-selector.tsx
│   │   ├── search-progress.tsx
│   │   ├── progress-stage.tsx
│   │   ├── results-container.tsx
│   │   ├── results-table.tsx
│   │   ├── contact-card.tsx
│   │   ├── contact-preview.tsx
│   │   ├── confidence-badge.tsx
│   │   ├── source-list.tsx
│   │   ├── import-summary.tsx
│   │   ├── import-modal.tsx
│   │   └── error-display.tsx
│   ├── hooks/
│   │   ├── use-search-progress.ts
│   │   ├── use-search-results.ts
│   │   ├── use-contact-import.ts
│   │   └── use-find-contacts-modal.ts
│   ├── context/
│   │   └── find-contacts-context.tsx
│   ├── types/
│   │   ├── search.types.ts
│   │   ├── contact.types.ts
│   │   └── ui.types.ts
│   └── utils/
│       ├── search-config-validation.ts
│       ├── confidence-utils.ts
│       └── formatters.ts
```

## Component Specifications

### 1. FindContactsButton

**File**: `src/components/features/ai/find-contacts/components/find-contacts-button.tsx`

**Purpose**: Primary entry point button in the header action area.

**Props Interface**:
```typescript
interface FindContactsButtonProps {
  onClick: () => void;
  disabled?: boolean;
  loading?: boolean;
  variant?: 'default' | 'outline' | 'ghost';
  size?: 'default' | 'sm' | 'lg';
  className?: string;
}
```

**Implementation**:
```typescript
import React from 'react';
import { Button } from '@/components/ui/button';
import { Sparkles, Loader2 } from 'lucide-react';
import { cn } from '@/lib/utils';

export const FindContactsButton: React.FC<FindContactsButtonProps> = ({
  onClick,
  disabled = false,
  loading = false,
  variant = 'default',
  size = 'default',
  className
}) => {
  return (
    <Button
      variant={variant}
      size={size}
      onClick={onClick}
      disabled={disabled || loading}
      className={cn(
        'bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700',
        'text-white border-0 shadow-sm hover:shadow-md transition-all duration-200',
        loading && 'opacity-80',
        className
      )}
    >
      {loading ? (
        <>
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          Searching...
        </>
      ) : (
        <>
          <Sparkles className="mr-2 h-4 w-4" />
          Find Contacts
        </>
      )}
    </Button>
  );
};
```

**States**:
- **Default**: Sparkles icon + "Find Contacts" text
- **Loading**: Spinner + "Searching..." text
- **Disabled**: Reduced opacity, no interactions
- **Hover**: Enhanced shadow, slight color shift

**Accessibility**:
- `aria-label`: "Find contacts using AI search"
- `aria-describedby`: Loading status announcement
- Keyboard navigation support

### 2. FindContactsModal

**File**: `src/components/features/ai/find-contacts/components/find-contacts-modal.tsx`

**Purpose**: Main modal container that manages the entire search workflow.

**Props Interface**:
```typescript
interface FindContactsModalProps {
  isOpen: boolean;
  onClose: () => void;
  onContactsImported?: (contacts: ImportedContact[]) => void;
  initialStep?: 'search' | 'results';
  className?: string;
}
```

**State Management**:
```typescript
interface ModalState {
  currentStep: 'search' | 'progress' | 'results' | 'import';
  searchConfig: SearchConfig | null;
  searchId: string | null;
  searchProgress: SearchProgress | null;
  searchResults: SearchResult | null;
  selectedContacts: string[];
  importProgress: ImportProgress | null;
  error: Error | null;
}
```

**Implementation**:
```typescript
import React, { useState, useCallback } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { FindContactsProvider, useFindContacts } from '../context/find-contacts-context';
import { SearchForm } from './search-form';
import { SearchProgress } from './search-progress';
import { ResultsContainer } from './results-container';
import { ImportSummary } from './import-summary';
import { ErrorDisplay } from './error-display';

const FindContactsModalContent: React.FC<FindContactsModalProps> = ({
  onClose,
  onContactsImported,
  initialStep = 'search'
}) => {
  const { state, actions } = useFindContacts();

  const handleClose = useCallback(() => {
    if (state.currentStep === 'progress' && state.searchId) {
      // Ask for confirmation before cancelling
      actions.cancelSearch(state.searchId);
    }
    onClose();
  }, [state.currentStep, state.searchId, actions, onClose]);

  const renderCurrentStep = () => {
    switch (state.currentStep) {
      case 'search':
        return <SearchForm onSubmit={actions.startSearch} />;
      case 'progress':
        return (
          <SearchProgress
            searchId={state.searchId!}
            onComplete={actions.setSearchResults}
            onError={actions.setError}
            onCancel={handleClose}
          />
        );
      case 'results':
        return (
          <ResultsContainer
            searchResults={state.searchResults!}
            selectedContacts={state.selectedContacts}
            onSelectionChange={actions.setSelectedContacts}
            onImport={actions.importContacts}
            onBack={() => actions.setCurrentStep('search')}
          />
        );
      case 'import':
        return (
          <ImportSummary
            importProgress={state.importProgress!}
            onComplete={() => {
              onContactsImported?.(state.importProgress?.importedContacts || []);
              handleClose();
            }}
            onBack={() => actions.setCurrentStep('results')}
          />
        );
      default:
        return null;
    }
  };

  return (
    <DialogContent className="max-w-4xl max-h-[90vh] overflow-hidden">
      <DialogHeader>
        <DialogTitle className="flex items-center gap-2">
          <Sparkles className="h-5 w-5 text-indigo-500" />
          Find Contacts with AI
        </DialogTitle>
      </DialogHeader>
      
      <div className="flex-1 overflow-y-auto">
        {state.error && (
          <ErrorDisplay
            error={state.error}
            onRetry={() => actions.setError(null)}
            className="mb-4"
          />
        )}
        
        {renderCurrentStep()}
      </div>
    </DialogContent>
  );
};

export const FindContactsModal: React.FC<FindContactsModalProps> = (props) => {
  return (
    <FindContactsProvider>
      <Dialog open={props.isOpen} onOpenChange={props.onClose}>
        <FindContactsModalContent {...props} />
      </Dialog>
    </FindContactsProvider>
  );
};
```

**Modal Dimensions**:
- **Desktop**: `max-w-4xl` (1024px)
- **Tablet**: `max-w-3xl` (768px)
- **Mobile**: Full screen with padding

**Animation**:
- Fade in/out: 200ms ease-in-out
- Scale effect: 95% to 100%
- Backdrop blur: 4px

### 3. SearchForm

**File**: `src/components/features/ai/find-contacts/components/search-form.tsx`

**Purpose**: Configuration form for search parameters.

**Props Interface**:
```typescript
interface SearchFormProps {
  onSubmit: (config: SearchConfig) => void;
  loading?: boolean;
  initialConfig?: Partial<SearchConfig>;
  className?: string;
}
```

**Form Structure**:
```typescript
interface FormState {
  countries: string[];
  categories: string[];
  beats: string[];
  maxResults: number;
  options: {
    contactTypes: ContactType[];
    outletTypes: OutletType[];
    confidenceThreshold: number;
    includeSocialProfiles: boolean;
    verifyEmails: boolean;
    languages: string[];
  };
}

interface FormErrors {
  countries?: string;
  categories?: string;
  maxResults?: string;
  confidenceThreshold?: string;
}
```

**Implementation**:
```typescript
import React, { useState, useCallback } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { CountrySelector } from './country-selector';
import { CategorySelector } from './category-selector';
import { BeatSelector } from './beat-selector';
import { SearchOptionsForm } from './search-options-form';
import { searchConfigSchema } from '../utils/search-config-validation';

const searchFormSchema = z.object({
  countries: z.array(z.string()).min(1, 'Select at least 1 country'),
  categories: z.array(z.string()).min(1, 'Select at least 1 category'),
  beats: z.array(z.string()).optional(),
  maxResults: z.number().min(1).max(100),
  options: z.object({
    contactTypes: z.array(z.string()).optional(),
    outletTypes: z.array(z.string()).optional(),
    confidenceThreshold: z.number().min(0).max(1),
    includeSocialProfiles: z.boolean(),
    verifyEmails: z.boolean(),
    languages: z.array(z.string()).optional()
  })
});

export const SearchForm: React.FC<SearchFormProps> = ({
  onSubmit,
  loading = false,
  initialConfig
}) => {
  const [showAdvanced, setShowAdvanced] = useState(false);
  
  const form = useForm<SearchConfig>({
    resolver: zodResolver(searchFormSchema),
    defaultValues: {
      countries: [],
      categories: [],
      beats: [],
      maxResults: 50,
      options: {
        contactTypes: ['journalist', 'editor'],
        outletTypes: ['mainstream', 'niche'],
        confidenceThreshold: 0.7,
        includeSocialProfiles: true,
        verifyEmails: true,
        languages: ['en']
      },
      ...initialConfig
    }
  });

  const handleSubmit = useCallback((data: SearchConfig) => {
    onSubmit(data);
  }, [onSubmit]);

  const { countries, categories } = form.watch();

  const canSubmit = countries.length > 0 && categories.length > 0 && !loading;

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center space-y-2">
        <h3 className="text-lg font-semibold">Discover Media Contacts</h3>
        <p className="text-muted-foreground text-sm max-w-md mx-auto">
          We'll scan the web and bring you a curated list of media contacts 
          based on your selected countries and categories. Our AI will analyze 
          profiles, verify information, and provide confidence scores.
        </p>
      </div>

      <Separator />

      {/* Main Selection */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="text-base">Countries</CardTitle>
          </CardHeader>
          <CardContent>
            <CountrySelector
              value={form.watch('countries')}
              onChange={(countries) => form.setValue('countries', countries)}
              error={form.formState.errors.countries?.message}
            />
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-base">Categories</CardTitle>
          </CardHeader>
          <CardContent>
            <CategorySelector
              value={form.watch('categories')}
              onChange={(categories) => form.setValue('categories', categories)}
              error={form.formState.errors.categories?.message}
            />
          </CardContent>
        </Card>
      </div>

      {/* Advanced Options */}
      <div>
        <Button
          type="button"
          variant="ghost"
          onClick={() => setShowAdvanced(!showAdvanced)}
          className="w-full justify-between"
        >
          <span>Advanced Options</span>
          <span className="text-xs text-muted-foreground">
            {showAdvanced ? 'Hide' : 'Show'}
          </span>
        </Button>

        {showAdvanced && (
          <div className="mt-4 space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-base">Search Preferences</CardTitle>
              </CardHeader>
              <CardContent>
                <SearchOptionsForm
                  form={form}
                  countries={countries}
                  categories={categories}
                />
              </CardContent>
            </Card>
          </div>
        )}
      </div>

      {/* Form Actions */}
      <div className="flex justify-between items-center">
        <div className="text-sm text-muted-foreground">
          {canSubmit && (
            <span>
              Estimated search time: ~30 seconds • 
              Results: Up to {form.watch('maxResults')} contacts
            </span>
          )}
        </div>

        <div className="flex gap-2">
          <Button
            type="button"
            variant="outline"
            onClick={() => form.reset()}
            disabled={loading}
          >
            Reset
          </Button>
          <Button
            type="button"
            onClick={form.handleSubmit(handleSubmit)}
            disabled={!canSubmit}
            loading={loading}
          >
            {loading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Starting Search...
              </>
            ) : (
              <>
                <Search className="mr-2 h-4 w-4" />
                Scan Web & Find Contacts
              </>
            )}
          </Button>
        </div>
      </div>
    </div>
  );
};
```

### 4. CountrySelector

**File**: `src/components/features/ai/find-contacts/components/country-selector.tsx`

**Purpose**: Multi-select country picker with search and grouping.

**Props Interface**:
```typescript
interface CountrySelectorProps {
  value: string[];
  onChange: (countries: string[]) => void;
  error?: string;
  maxSelections?: number;
  placeholder?: string;
  className?: string;
}
```

**Features**:
- Search functionality
- Regional grouping (Europe, Asia, Americas, etc.)
- Popular countries quick selection
- Visual flag indicators
- Selection limit enforcement

**Implementation**:
```typescript
import React, { useState, useMemo } from 'react';
import { Check, ChevronDown, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem } from '@/components/ui/command';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { cn } from '@/lib/utils';

interface CountryOption {
  code: string;
  name: string;
  flag: string;
  region: string;
  popular?: boolean;
}

const countryOptions: CountryOption[] = [
  { code: 'US', name: 'United States', flag: '🇺🇸', region: 'Americas', popular: true },
  { code: 'GB', name: 'United Kingdom', flag: '🇬🇧', region: 'Europe', popular: true },
  { code: 'CA', name: 'Canada', flag: '🇨🇦', region: 'Americas', popular: true },
  // ... more countries
];

export const CountrySelector: React.FC<CountrySelectorProps> = ({
  value,
  onChange,
  error,
  maxSelections = 10,
  placeholder = "Select countries...",
  className
}) => {
  const [open, setOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');

  const filteredCountries = useMemo(() => {
    const filtered = countryOptions.filter(country =>
      country.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      country.code.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const popular = filtered.filter(c => c.popular);
    const byRegion = filtered.reduce((acc, country) => {
      if (!acc[country.region]) acc[country.region] = [];
      acc[country.region].push(country);
      return acc;
    }, {} as Record<string, CountryOption[]>);

    return { popular, byRegion };
  }, [searchTerm]);

  const handleSelect = (countryCode: string) => {
    if (value.includes(countryCode)) {
      onChange(value.filter(c => c !== countryCode));
    } else if (value.length < maxSelections) {
      onChange([...value, countryCode]);
    }
  };

  const selectedCountries = value.map(code => 
    countryOptions.find(c => c.code === code)
  ).filter(Boolean) as CountryOption[];

  return (
    <div className={cn("space-y-2", className)}>
      <Popover open={open} onOpenChange={setOpen}>
        <PopoverTrigger asChild>
          <Button
            variant="outline"
            role="combobox"
            aria-expanded={open}
            className={cn(
              "w-full justify-between text-left font-normal",
              value.length === 0 && "text-muted-foreground",
              error && "border-red-500"
            )}
          >
            <div className="flex flex-wrap gap-1">
              {selectedCountries.length > 0 ? (
                selectedCountries.map(country => (
                  <Badge
                    key={country.code}
                    variant="secondary"
                    className="mr-1 mb-1"
                  >
                    <span className="mr-1">{country.flag}</span>
                    {country.name}
                    <X
                      className="ml-1 h-3 w-3 cursor-pointer"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleSelect(country.code);
                      }}
                    />
                  </Badge>
                ))
              ) : (
                placeholder
              )}
            </div>
            <ChevronDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
          </Button>
        </PopoverTrigger>
        
        <PopoverContent className="w-full p-0" align="start">
          <Command>
            <CommandInput
              placeholder="Search countries..."
              value={searchTerm}
              onValueChange={setSearchTerm}
            />
            <CommandEmpty>No countries found.</CommandEmpty>
            
            <ScrollArea className="h-72">
              {filteredCountries.popular.length > 0 && (
                <CommandGroup heading="Popular">
                  {filteredCountries.popular.map(country => (
                    <CommandItem
                      key={country.code}
                      value={country.code}
                      onSelect={() => handleSelect(country.code)}
                    >
                      <Check
                        className={cn(
                          "mr-2 h-4 w-4",
                          value.includes(country.code) ? "opacity-100" : "opacity-0"
                        )}
                      />
                      <span className="mr-2">{country.flag}</span>
                      {country.name}
                      <span className="ml-auto text-xs text-muted-foreground">
                        {country.code}
                      </span>
                    </CommandItem>
                  ))}
                </CommandGroup>
              )}

              {Object.entries(filteredCountries.byRegion).map(([region, countries]) => (
                <CommandGroup key={region} heading={region}>
                  {countries.map(country => (
                    <CommandItem
                      key={country.code}
                      value={country.code}
                      onSelect={() => handleSelect(country.code)}
                    >
                      <Check
                        className={cn(
                          "mr-2 h-4 w-4",
                          value.includes(country.code) ? "opacity-100" : "opacity-0"
                        )}
                      />
                      <span className="mr-2">{country.flag}</span>
                      {country.name}
                      <span className="ml-auto text-xs text-muted-foreground">
                        {country.code}
                      </span>
                    </CommandItem>
                  ))}
                </CommandGroup>
              ))}
            </ScrollArea>
          </Command>
        </PopoverContent>
      </Popover>

      <div className="flex justify-between items-center">
        {error && (
          <span className="text-sm text-red-500">{error}</span>
        )}
        <span className="text-xs text-muted-foreground">
          {value.length}/{maxSelections} selected
        </span>
      </div>
    </div>
  );
};
```

### 5. SearchProgress

**File**: `src/components/features/ai/find-contacts/components/search-progress.tsx`

**Purpose**: Real-time progress display during search execution.

**Props Interface**:
```typescript
interface SearchProgressProps {
  searchId: string;
  onComplete: (results: SearchResult) => void;
  onError: (error: Error) => void;
  onCancel: () => void;
  className?: string;
}
```

**Progress Stages**:
1. **Generating Search Queries**: 0-10%
2. **Searching Web Sources**: 10-40%
3. **Extracting Contact Information**: 40-70%
4. **Verifying Contacts**: 70-90%
5. **Finalizing Results**: 90-100%

**Implementation**:
```typescript
import React, { useState, useEffect } from 'react';
import { Progress } from '@/components/ui/progress';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { CheckCircle, Circle, Loader2, XCircle, AlertCircle } from 'lucide-react';
import { ProgressStage } from './progress-stage';
import { useSearchProgress } from '../hooks/use-search-progress';

export const SearchProgress: React.FC<SearchProgressProps> = ({
  searchId,
  onComplete,
  onError,
  onCancel,
  className
}) => {
  const [cancelRequested, setCancelRequested] = useState(false);
  
  const { progress, error, isLoading } = useSearchProgress(searchId, {
    onComplete,
    onError,
    pollingInterval: 2000
  });

  const getStatusIcon = (status: ProgressStage['status']) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'in_progress':
        return <Loader2 className="h-4 w-4 text-blue-500 animate-spin" />;
      case 'failed':
        return <XCircle className="h-4 w-4 text-red-500" />;
      default:
        return <Circle className="h-4 w-4 text-gray-400" />;
    }
  };

  const getStatusColor = (status: ProgressStage['status']) => {
    switch (status) {
      case 'completed':
        return 'text-green-600';
      case 'in_progress':
        return 'text-blue-600';
      case 'failed':
        return 'text-red-600';
      default:
        return 'text-gray-500';
    }
  };

  if (error) {
    return (
      <Card className={className}>
        <CardContent className="pt-6">
          <div className="text-center space-y-4">
            <AlertCircle className="h-12 w-12 text-red-500 mx-auto" />
            <div>
              <h3 className="text-lg font-semibold text-red-900">Search Failed</h3>
              <p className="text-muted-foreground">{error.message}</p>
            </div>
            <Button onClick={onCancel} variant="outline">
              Close
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={className}>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Loader2 className="h-5 w-5 animate-spin text-blue-500" />
          Finding Contacts
        </CardTitle>
      </CardHeader>
      
      <CardContent className="space-y-6">
        {/* Overall Progress */}
        <div className="space-y-2">
          <div className="flex justify-between text-sm">
            <span className="font-medium">Overall Progress</span>
            <span className="text-muted-foreground">{progress?.progress || 0}%</span>
          </div>
          <Progress 
            value={progress?.progress || 0} 
            className="h-2"
          />
          <p className="text-sm text-muted-foreground text-center">
            {progress?.currentStage || 'Initializing...'}
          </p>
        </div>

        {/* Stage Details */}
        <div className="space-y-3">
          {progress?.stages.map((stage, index) => (
            <ProgressStage
              key={stage.name}
              stage={stage}
              isCurrent={progress?.currentStage === stage.name}
            />
          ))}
        </div>

        {/* Statistics */}
        {progress && (
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">
                {progress.contactsFound}
              </div>
              <div className="text-xs text-muted-foreground">Contacts Found</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">
                {progress.contactsVerified}
              </div>
              <div className="text-xs text-muted-foreground">Verified</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">
                {progress.sourcesProcessed}
              </div>
              <div className="text-xs text-muted-foreground">Sources</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-600">
                {progress.estimatedRemaining}s
              </div>
              <div className="text-xs text-muted-foreground">Est. Remaining</div>
            </div>
          </div>
        )}

        {/* Errors */}
        {progress?.errors && progress.errors.length > 0 && (
          <div className="space-y-2">
            <h4 className="text-sm font-medium text-orange-600">Warnings</h4>
            {progress.errors.map((error, index) => (
              <div key={index} className="flex items-center gap-2 text-sm">
                <AlertCircle className="h-3 w-3 text-orange-500" />
                <span className="text-muted-foreground">{error.message}</span>
              </div>
            ))}
          </div>
        )}

        {/* Actions */}
        <div className="flex justify-center">
          <Button
            onClick={onCancel}
            variant="outline"
            disabled={cancelRequested}
          >
            {cancelRequested ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Cancelling...
              </>
            ) : (
              <>
                <X className="mr-2 h-4 w-4" />
                Cancel Search
              </>
            )}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};
```

### 6. ResultsTable

**File**: `src/components/features/ai/find-contacts/components/results-table.tsx`

**Purpose**: Tabular display of discovered contacts with selection and import capabilities.

**Props Interface**:
```typescript
interface ResultsTableProps {
  contacts: DiscoveredContact[];
  selectedContacts: string[];
  onSelectionChange: (contactIds: string[]) => void;
  onImport: (contactIds: string[]) => void;
  loading?: boolean;
  className?: string;
}
```

**Features**:
- Sortable columns
- Confidence score indicators
- Contact preview on hover
- Bulk selection controls
- Import functionality
- Filter capabilities

**Implementation**:
```typescript
import React, { useState, useMemo } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import { ConfidenceBadge } from './confidence-badge';
import { ContactPreview } from './contact-preview';
import { 
  ArrowUpDown, 
  ArrowUp, 
  ArrowDown,
  Download, 
  Eye,
  User,
  Building,
  Mail
} from 'lucide-react';
import { cn } from '@/lib/utils';

type SortField = 'name' | 'outlet' | 'confidence' | 'verifiedAt';
type SortOrder = 'asc' | 'desc';

interface ColumnConfig {
  key: string;
  label: string;
  sortable: boolean;
  width?: string;
}

const columns: ColumnConfig[] = [
  { key: 'selection', label: '', sortable: false, width: '50px' },
  { key: 'name', label: 'Name', sortable: true },
  { key: 'title', label: 'Title', sortable: true },
  { key: 'outlet', label: 'Outlet', sortable: true },
  { key: 'email', label: 'Email', sortable: false },
  { key: 'confidence', label: 'Confidence', sortable: true, width: '120px' },
  { key: 'actions', label: 'Actions', sortable: false, width: '100px' },
];

export const ResultsTable: React.FC<ResultsTableProps> = ({
  contacts,
  selectedContacts,
  onSelectionChange,
  onImport,
  loading = false,
  className
}) => {
  const [sortField, setSortField] = useState<SortField>('confidence');
  const [sortOrder, setSortOrder] = useState<SortOrder>('desc');
  const [previewContact, setPreviewContact] = useState<string | null>(null);

  const sortedContacts = useMemo(() => {
    const sorted = [...contacts].sort((a, b) => {
      let aValue: any;
      let bValue: any;

      switch (sortField) {
        case 'name':
          aValue = a.name.toLowerCase();
          bValue = b.name.toLowerCase();
          break;
        case 'outlet':
          aValue = a.outlet?.toLowerCase() || '';
          bValue = b.outlet?.toLowerCase() || '';
          break;
        case 'confidence':
          aValue = a.confidence;
          bValue = b.confidence;
          break;
        default:
          return 0;
      }

      if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1;
      if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1;
      return 0;
    });

    return sorted;
  }, [contacts, sortField, sortOrder]);

  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortOrder('desc');
    }
  };

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      onSelectionChange(contacts.map(c => c.id));
    } else {
      onSelectionChange([]);
    }
  };

  const handleSelectContact = (contactId: string, checked: boolean) => {
    if (checked) {
      onSelectionChange([...selectedContacts, contactId]);
    } else {
      onSelectionChange(selectedContacts.filter(id => id !== contactId));
    }
  };

  const getSortIcon = (field: SortField) => {
    if (sortField !== field) return <ArrowUpDown className="h-4 w-4" />;
    return sortOrder === 'asc' ? <ArrowUp className="h-4 w-4" /> : <ArrowDown className="h-4 w-4" />;
  };

  return (
    <div className={cn("space-y-4", className)}>
      {/* Table Controls */}
      <div className="flex justify-between items-center">
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2">
            <Checkbox
              checked={selectedContacts.length === contacts.length}
              onCheckedChange={handleSelectAll}
            />
            <span className="text-sm text-muted-foreground">
              {selectedContacts.length} of {contacts.length} selected
            </span>
          </div>
          
          {selectedContacts.length > 0 && (
            <Badge variant="secondary">
              {selectedContacts.length} ready to import
            </Badge>
          )}
        </div>

        <Button
          onClick={() => onImport(selectedContacts)}
          disabled={selectedContacts.length === 0 || loading}
          loading={loading}
        >
          <Download className="mr-2 h-4 w-4" />
          Import Selected
        </Button>
      </div>

      {/* Results Table */}
      <div className="border rounded-lg overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              {columns.map((column) => (
                <TableHead 
                  key={column.key}
                  className={cn(
                    "bg-muted/50",
                    column.sortable && "cursor-pointer hover:bg-muted/70"
                  )}
                  style={{ width: column.width }}
                  onClick={() => column.sortable && handleSort(column.key as SortField)}
                >
                  <div className="flex items-center gap-1">
                    {column.label}
                    {column.sortable && getSortIcon(column.key as SortField)}
                  </div>
                </TableHead>
              ))}
            </TableRow>
          </TableHeader>
          
          <TableBody>
            {sortedContacts.map((contact) => (
              <TableRow 
                key={contact.id}
                className={cn(
                  "hover:bg-muted/30",
                  selectedContacts.includes(contact.id) && "bg-blue-50/30"
                )}
              >
                <TableCell>
                  <Checkbox
                    checked={selectedContacts.includes(contact.id)}
                    onCheckedChange={(checked) => handleSelectContact(contact.id, checked as boolean)}
                  />
                </TableCell>
                
                <TableCell className="font-medium">
                  <div className="flex items-center gap-2">
                    <User className="h-4 w-4 text-muted-foreground" />
                    <span>{contact.name}</span>
                  </div>
                </TableCell>
                
                <TableCell>
                  <div className="max-w-xs truncate" title={contact.title}>
                    {contact.title || '-'}
                  </div>
                </TableCell>
                
                <TableCell>
                  <div className="flex items-center gap-2">
                    <Building className="h-4 w-4 text-muted-foreground" />
                    <div className="max-w-xs truncate" title={contact.outlet}>
                      {contact.outlet || '-'}
                    </div>
                  </div>
                </TableCell>
                
                <TableCell>
                  {contact.email ? (
                    <div className="flex items-center gap-2">
                      <Mail className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm">{contact.email}</span>
                    </div>
                  ) : (
                    <span className="text-muted-foreground text-sm">No email</span>
                  )}
                </TableCell>
                
                <TableCell>
                  <ConfidenceBadge confidence={contact.confidence} />
                </TableCell>
                
                <TableCell>
                  <div className="flex items-center gap-1">
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => setPreviewContact(contact.id)}
                    >
                      <Eye className="h-4 w-4" />
                    </Button>
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      {/* Contact Preview Modal */}
      {previewContact && (
        <ContactPreview
          contact={contacts.find(c => c.id === previewContact)!}
          isOpen={!!previewContact}
          onClose={() => setPreviewContact(null)}
          onImport={() => {
            if (!selectedContacts.includes(previewContact)) {
              onSelectionChange([...selectedContacts, previewContact]);
            }
            setPreviewContact(null);
          }}
          isImported={selectedContacts.includes(previewContact)}
        />
      )}
    </div>
  );
};
```

### 7. ConfidenceBadge

**File**: `src/components/features/ai/find-contacts/components/confidence-badge.tsx`

**Purpose**: Visual indicator for contact confidence scores.

**Props Interface**:
```typescript
interface ConfidenceBadgeProps {
  confidence: number;
  showLabel?: boolean;
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}
```

**Implementation**:
```typescript
import React from 'react';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';

interface ConfidenceBadgeProps {
  confidence: number;
  showLabel?: boolean;
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

export const ConfidenceBadge: React.FC<ConfidenceBadgeProps> = ({
  confidence,
  showLabel = true,
  size = 'md',
  className
}) => {
  const getConfidenceLevel = (score: number) => {
    if (score >= 0.8) return { level: 'High', color: 'bg-green-100 text-green-800' };
    if (score >= 0.6) return { level: 'Medium', color: 'bg-yellow-100 text-yellow-800' };
    return { level: 'Low', color: 'bg-red-100 text-red-800' };
  };

  const { level, color } = getConfidenceLevel(confidence);
  
  const sizeClasses = {
    sm: 'px-2 py-0.5 text-xs',
    md: 'px-2.5 py-1 text-sm',
    lg: 'px-3 py-1.5 text-base'
  };

  return (
    <div className={cn("flex items-center gap-2", className)}>
      <Badge 
        variant="secondary" 
        className={cn(
          sizeClasses[size],
          color,
          "font-medium"
        )}
      >
        {Math.round(confidence * 100)}%
      </Badge>
      
      {showLabel && (
        <span className="text-xs text-muted-foreground">{level}</span>
      )}
    </div>
  );
};
```

## Custom Hooks

### useSearchProgress
```typescript
// src/components/features/ai/find-contacts/hooks/use-search-progress.ts
import { useState, useEffect } from 'react';
import { SearchProgress as SearchProgressType, SearchResult } from '../types';

interface UseSearchProgressOptions {
  onComplete?: (results: SearchResult) => void;
  onError?: (error: Error) => void;
  pollingInterval?: number;
}

export const useSearchProgress = (
  searchId: string,
  options: UseSearchProgressOptions = {}
) => {
  const [progress, setProgress] = useState<SearchProgressType | null>(null);
  const [error, setError] = useState<Error | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  const { onComplete, onError, pollingInterval = 2000 } = options;

  useEffect(() => {
    if (!searchId) return;

    const pollProgress = async () => {
      try {
        const response = await fetch(`/api/ai/search/${searchId}/progress`);
        const data = await response.json();

        if (data.success) {
          setProgress(data.data);
          
          if (data.data.status === 'completed') {
            // Fetch final results
            const resultsResponse = await fetch(`/api/ai/search/${searchId}/results`);
            const resultsData = await resultsResponse.json();
            
            if (resultsData.success) {
              onComplete?.(resultsData.data);
            }
            setIsLoading(false);
          } else if (data.data.status === 'failed') {
            setError(new Error(data.data.error?.message || 'Search failed'));
            onError?.(error);
            setIsLoading(false);
          }
        }
      } catch (err) {
        const error = err instanceof Error ? err : new Error('Failed to fetch progress');
        setError(error);
        onError?.(error);
        setIsLoading(false);
      }
    };

    pollProgress();
    const interval = setInterval(pollProgress, pollingInterval);

    return () => clearInterval(interval);
  }, [searchId, onComplete, onError, pollingInterval]);

  return { progress, error, isLoading };
};
```

## Responsive Design

### Breakpoints
```css
/* Mobile (sm): 640px+ */
@media (min-width: 640px) {
  .ai-modal {
    max-width: 95vw;
  }
}

/* Tablet (md): 768px+ */
@media (min-width: 768px) {
  .ai-modal {
    max-width: 90vw;
  }
  
  .search-form {
    grid-template-columns: 1fr 1fr;
  }
}

/* Desktop (lg): 1024px+ */
@media (min-width: 1024px) {
  .ai-modal {
    max-width: 80vw;
    max-width: 1024px;
  }
  
  .results-table {
    font-size: 14px;
  }
}
```

### Mobile Optimizations
- Touch-friendly button sizes (minimum 44px)
- Swipe gestures for navigation
- Collapsible sections
- Simplified table view on mobile
- Full-screen modals on small screens

## Animation Specifications

### Transitions
```css
.ai-feature-transition {
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
}

.ai-progress-animation {
  transition: width 0.3s ease-out;
}

.ai-fade-in {
  animation: fadeIn 0.2s ease-out;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.ai-slide-up {
  animation: slideUp 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

@keyframes slideUp {
  from { transform: translateY(100%); }
  to { transform: translateY(0); }
}
```

## Accessibility Requirements

### WCAG 2.1 AA Compliance
- **Keyboard Navigation**: Full keyboard access to all interactive elements
- **Screen Reader Support**: Proper ARIA labels and descriptions
- **Color Contrast**: Minimum 4.5:1 ratio for normal text
- **Focus Indicators**: Visible focus states for all interactive elements
- **Reduced Motion**: Respect prefers-reduced-motion settings

### ARIA Implementation
```typescript
// Example ARIA attributes
<div
  role="dialog"
  aria-labelledby="modal-title"
  aria-describedby="modal-description"
  aria-modal="true"
>
  <h2 id="modal-title">Find Contacts with AI</h2>
  <p id="modal-description">Search configuration and results</p>
</div>

<button
  aria-label="View contact details for Sarah Johnson"
  aria-expanded={false}
  aria-controls={`contact-preview-${contactId}`}
>
  <Eye className="h-4 w-4" />
</button>
```

## Performance Optimizations

### Component Optimization
- React.memo for expensive components
- useMemo for computed values
- useCallback for event handlers
- Virtual scrolling for large result sets
- Lazy loading for heavy components

### Bundle Optimization
- Code splitting by route
- Dynamic imports for modal components
- Tree shaking for unused utilities
- Image optimization for flags and icons

## Testing Strategy

### Unit Tests
- Component rendering tests
- User interaction tests
- Form validation tests
- Hook behavior tests

### Integration Tests
- Component integration tests
- API integration tests
- Modal flow tests
- Error handling tests

### E2E Tests
- Complete user journey tests
- Cross-browser compatibility
- Mobile responsiveness
- Accessibility compliance

---

## Implementation Checklist

### Core Components
- [ ] FindContactsButton
- [ ] FindContactsModal
- [ ] SearchForm
- [ ] CountrySelector
- [ ] CategorySelector
- [ ] SearchProgress
- [ ] ResultsTable
- [ ] ContactPreview
- [ ] ConfidenceBadge

### Utilities
- [ ] Form validation schemas
- [ ] Confidence calculation utilities
- [ ] Data formatting utilities
- [ ] Error handling utilities

### Hooks
- [ ] useSearchProgress
- [ ] useSearchResults
- [ ] useContactImport
- [ ] useFindContactsModal

### Context
- [ ] FindContactsProvider
- [ ] State management
- [ ] Actions dispatch

### Styling
- [ ] Theme extensions
- [ ] Responsive design
- [ ] Animation specifications
- [ ] Accessibility compliance

### Testing
- [ ] Unit test suites
- [ ] Integration tests
- [ ] E2E test scenarios
- [ ] Accessibility tests
# Shard Epic into Development Stories

## Purpose
This prompt breaks down a feature epic into individual development stories, creating detailed story files that can be independently developed and tested.

## Usage
Run this prompt when you have an epic number and name from the implementation plan and need to create detailed development stories.

## Input Parameters
- **epic_number**: The epic number (e.g., "1", "2", "3")
- **epic_name**: The epic name (e.g., "Foundation & Infrastructure", "AI Search Service")
- **feature_path**: Path to the feature planning directory (e.g., "plan/find-contacts")
- **implementation_tasks_file**: Path to the implementation tasks document (optional, defaults to "implementation-tasks.mdc")

## Output Structure
For each story in the epic, create:
```
{feature_path}/stories/epic-{number}-{name}/story-{number}-{name}.mdc
```

## What Each Story Should Contain

### Story Header
```markdown
# Story {number}: {Story Name}
**Epic**: Epic {epic_number}: {epic_name}
**Estimated Time**: {X days}
**Priority**: {Critical|High|Medium|Low}
**Status**: {Pending|In Progress|Completed}
**Assignee**: {Developer Name}
```

### Story Content
1. **Objective**: Clear statement of what needs to be accomplished
2. **Acceptance Criteria**: Specific, measurable criteria for completion
3. **Technical Requirements**: Detailed technical specifications
4. **Dependencies**: What needs to be completed first
5. **Definition of Done**: When the story is considered complete
6. **Testing Requirements**: What tests need to be written
7. **Implementation Notes**: Technical guidance and best practices

## Instructions for the AI

When you receive an epic breakdown request:

1. **Read the Implementation Tasks Document**: Locate the epic in the specified implementation tasks file
2. **Identify All Stories**: Extract each task/subtask within the epic
3. **Create Story Directory**: `{feature_path}/stories/epic-{number}-{name}/`
4. **Generate Story Files**: Create one `.mdc` file per story with comprehensive details
5. **Cross-Reference**: Link to relevant technical specs, API contracts, and component specs
6. **Include Context**: Reference the broader feature documentation where relevant

## Generic Story Structure Template

```markdown
# Story {epic_number}.{story_number}: {Story Name}
**Epic**: Epic {epic_number}: {epic_name}
**Estimated Time**: {X days}
**Priority**: {Critical|High|Medium|Low}
**Status**: Pending
**Assignee**: {Developer Role}

## Objective
{Clear statement of what needs to be accomplished}

## Acceptance Criteria
- [ ] {Specific, measurable criterion 1}
- [ ] {Specific, measurable criterion 2}
- [ ] {Specific, measurable criterion 3}
- [ ] Performance requirements met
- [ ] Security requirements satisfied
- [ ] Documentation complete

## Technical Requirements

### Core Features
{List of main technical components and features}

### Integration Points
{How this story integrates with existing system}

### Dependencies
{What needs to be completed first}

## Definition of Done
- All acceptance criteria are met and validated
- Code is reviewed and approved
- Tests are written and passing
- Documentation is updated
- Integration with existing system works
- Performance and security requirements are met

## Testing Requirements

### Unit Tests
{Specific unit test requirements}

### Integration Tests
{Integration testing scenarios}

### E2E Tests
{End-to-end testing requirements}

### Performance Tests
{Performance testing criteria}

## Implementation Notes

### Development Guidelines
{Specific guidance for this story}

### Best Practices
{Best practices to follow}

### Security Considerations
{Security requirements and considerations}

### Performance Considerations
{Performance requirements and optimization strategies}

## Related Documentation
- [Technical Specification](../technical-spec.md#{relevant-section})
- [API Contracts](../api-contracts.md#{relevant-section})
- [Component Specifications](../component-specifications.md#{relevant-section})
```

## Epic Templates (Examples)

### Epic 1: Foundation & Infrastructure
Expected stories:
- Story 1.1: Database Schema Implementation
- Story 1.2: API Infrastructure Setup
- Story 1.3: External Service Integration

### Epic 2: Core Service Development
Expected stories:
- Story 2.1: {Service Name} Implementation
- Story 2.2: {Service Name} Integration
- Story 2.3: {Service Name} Testing & Validation

### Epic 3: Frontend Components
Expected stories:
- Story 3.1: {Component Group} Modal and Form Components
- Story 3.2: {Component Group} Progress Tracking Components
- Story 3.3: {Component Group} Results Display Components

### Epic 4: Integration & Testing
Expected stories:
- Story 4.1: End-to-End Integration
- Story 4.2: Comprehensive Testing Suite
- Story 4.3: Performance Optimization

### Epic 5: Polish & Launch
Expected stories:
- Story 5.1: User Experience Polish
- Story 5.2: Documentation and Training
- Story 5.3: Launch Preparation

## Usage Instructions

To use this prompt:

1. **Open the implementation tasks document**: `{feature_path}/{implementation_tasks_file}`
2. **Identify the epic**: Find the epic section with the specified number and name
3. **Extract all tasks**: Get all tasks/subtasks within that epic
4. **Create stories**: Generate a detailed story file for each task
5. **Organize by structure**: Create the directory structure and file naming
6. **Cross-reference**: Link to relevant documentation
7. **Validate completeness**: Ensure each story has all required sections

## Quality Checklist

For each generated story, ensure:
- [ ] Clear, measurable acceptance criteria
- [ ] Technical requirements are specific
- [ ] Dependencies are properly identified
- [ ] Testing requirements are comprehensive
- [ ] Definition of done is unambiguous
- [ ] Implementation notes are helpful
- [ ] Cross-references are accurate
- [ ] Story size is appropriate (1-5 days)
- [ ] Priority is correctly assigned
- [ ] Dependencies are logically ordered

## Output Format

The AI should respond with:
1. **Confirmation** of which epic is being broken down
2. **Directory structure** that will be created
3. **List of stories** to be generated
4. **Completion confirmation** when all stories are created

Example response:
```
I'm breaking down Epic 2: {Epic Name} into individual development stories.

Creating directory structure:
{feature_path}/stories/epic-2-{epic-name}/

Stories to create:
- Story 2.1: {Story Name 1}
- Story 2.2: {Story Name 2}
- Story 2.3: {Story Name 3}

All stories have been created with comprehensive details including acceptance criteria, technical requirements, testing needs, and cross-references to the broader feature documentation.
```

## Notes for AI Implementation

- Always reference the specific sections in the implementation tasks document
- Extract technical details from relevant specification documents
- Ensure stories are appropriately sized for development
- Maintain consistency in story structure and formatting
- Include relevant cross-references to other documentation
- Consider the overall feature context when writing individual stories
- Adapt story complexity and scope to match team capabilities
- Include both functional and non-functional requirements
- Ensure stories are independent enough for parallel development where possible

## Customization Guidelines

### For Different Feature Types
- **Backend-heavy features**: Focus on API, database, and service stories
- **Frontend-heavy features**: Focus on UI components, user flows, and interactions
- **Data-intensive features**: Include data migration, processing, and validation stories
- **Integration features**: Focus on external service integration and data synchronization

### For Different Team Sizes
- **Small teams**: Create larger, more comprehensive stories
- **Large teams**: Break into smaller, more focused stories for parallel work
- **Distributed teams**: Include more detailed documentation and coordination requirements

### For Different Complexity Levels
- **Simple features**: Fewer stories with broader scope
- **Complex features**: More granular stories with specific focus areas
- **High-risk features**: Include additional validation and testing stories
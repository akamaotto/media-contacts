generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model activity_logs {
  id         String   @id
  type       String
  entity     String
  entityId   String
  entityName String
  userId     String
  details    Json?
  timestamp  DateTime @default(now())
  users      users    @relation(fields: [userId], references: [id])

  @@index([timestamp])
  @@index([type, entity])
  @@index([userId])
}

model beats {
  id             String           @id
  name           String           @unique
  description    String?
  created_at     DateTime         @default(now())
  updated_at     DateTime
  categories     categories[]     @relation("BeatCategories")
  countries      countries[]      @relation("CountryToBeats")
  media_contacts media_contacts[] @relation("MediaContactBeats")
}

model categories {
  id          String    @id
  name        String    @unique
  description String?
  color       String?
  created_at  DateTime  @default(now())
  updated_at  DateTime
  beats       beats[]   @relation("BeatCategories")
  outlets     outlets[] @relation("OutletCategories")
}

model countries {
  id             String           @id
  name           String           @unique
  code           String?          @unique
  created_at     DateTime         @default(now())
  updated_at     DateTime
  capital        String?
  flag_emoji     String?
  latitude       Float?
  longitude      Float?
  phone_code     String?
  regions        regions[]        @relation("CountryRegions")
  beats          beats[]          @relation("CountryToBeats")
  languages      languages[]      @relation("CountryToLanguage")
  media_contacts media_contacts[] @relation("MediaContactCountries")
  outlets        outlets[]        @relation("OutletCountries")
}

model dashboard_metrics {
  id         String   @id
  metricType String
  value      Int
  date       DateTime @default(now())
  metadata   Json?

  @@index([metricType, date])
}

model languages {
  id         String      @id
  name       String      @unique
  code       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime
  countries  countries[] @relation("CountryToLanguage")
}

model media_contacts {
  id                    String      @id
  name                  String
  title                 String
  bio                   String?
  email                 String      @unique
  email_verified_status Boolean     @default(false)
  socials               String[]
  created_at            DateTime    @default(now())
  updated_at            DateTime
  authorLinks           String[]
  beats                 beats[]     @relation("MediaContactBeats")
  countries             countries[] @relation("MediaContactCountries")
  outlets               outlets[]   @relation("MediaContactOutlets")

  @@index([email_verified_status])
  @@index([name])
  @@index([updated_at])
}

model outlets {
  id             String           @id
  name           String           @unique
  description    String?
  website        String?
  created_at     DateTime         @default(now())
  updated_at     DateTime
  publisherId    String?
  publishers     publishers?      @relation(fields: [publisherId], references: [id])
  media_contacts media_contacts[] @relation("MediaContactOutlets")
  categories     categories[]     @relation("OutletCategories")
  countries      countries[]      @relation("OutletCountries")
}

model publishers {
  id          String    @id
  name        String    @unique
  description String?
  website     String?
  created_at  DateTime  @default(now())
  updated_at  DateTime
  outlets     outlets[]
}

model regions {
  id          String      @id
  name        String      @unique
  code        String      @unique
  category    String
  parent_code String?
  description String?
  created_at  DateTime    @default(now())
  updated_at  DateTime
  countries   countries[] @relation("CountryRegions")

  @@index([parent_code])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id             String          @id
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  hashedPassword String
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  role           Role            @default(USER)
  accounts       accounts[]
  activity_logs  activity_logs[]
  sessions       sessions[]
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  USER
}

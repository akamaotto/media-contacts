name: Production Deployment - AI Search Feature

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_deploy:
        description: 'Force deployment (skip tests)'
        required: false
        default: false
        type: boolean
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-deployment checks
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      deploy_version: ${{ steps.check.outputs.deploy_version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check if deployment should proceed
      id: check
      run: |
        # Determine if this is a production deployment
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "deploy_version=main-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "deploy_version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "deploy_version=manual-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        else
          echo "should_deploy=false" >> $GITHUB_OUTPUT
        fi

    - name: Verify deployment conditions
      if: steps.check.outputs.should_deploy == 'true'
      run: |
        # Check if we're not in a rollback scenario
        if [[ "${{ github.event.inputs.rollback }}" == "true" ]]; then
          echo "Rollback requested, skipping pre-deployment checks"
          exit 0
        fi
        
        # Check if main branch has passed all required checks
        echo "Verifying branch protection and required status checks..."
        
        # Check for recent commits that might indicate issues
        RECENT_COMMITS=$(git log --since="1 hour ago" --oneline | wc -l)
        if [[ $RECENT_COMMITS -gt 5 ]]; then
          echo "Warning: High number of recent commits ($RECENT_COMMITS), consider delaying deployment"
        fi

  # Security and quality checks
  security-and-quality-checks:
    name: Security and Quality Checks
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true' && github.event.inputs.rollback != 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run unit tests
      run: npm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        flags: production-deploy
        name: production-deploy-coverage

  # Build and test application
  build-and-test:
    name: Build and Test Application
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, security-and-quality-checks]
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true' && github.event.inputs.rollback != 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: media_contacts_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup environment variables
      run: |
        cat << EOF > .env.production
        NODE_ENV=production
        DATABASE_URL=postgresql://test:test@localhost:5432/media_contacts_test
        REDIS_URL=redis://localhost:6379/1
        NEXTAUTH_SECRET=test-nextauth-secret-for-ci
        NEXTAUTH_URL=https://your-production-domain.com
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
        EXA_API_KEY=${{ secrets.EXA_API_KEY }}
        FIRECRAWL_API_KEY=${{ secrets.FIRECRAWL_API_KEY }}
        AI_ENABLE_CACHING=true
        AI_ENABLE_METRICS=true
        AI_LOG_LEVEL=info
        EOF

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Setup test database
      run: |
        npx prisma db push --skip-generate
        npx prisma db seed

    - name: Build application
      run: npm run build

    - name: Run integration tests
      run: npm run test:integration

    - name: Run AI search specific tests
      run: npm run test:integration:external

    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          .next
          prisma
          package.json
          package-lock.json
        retention-days: 1

  # Deploy to staging first (if not already deploying to staging)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, build-and-test]
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true' && github.event.inputs.environment != 'staging' && github.event.inputs.rollback != 'true'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install production dependencies
      run: npm ci --production

    - name: Deploy to staging
      run: |
        chmod +x scripts/deployment/staging-deploy.sh
        ./scripts/deployment/staging-deploy.sh deploy

    - name: Run staging health checks
      run: |
        chmod +x scripts/monitoring/health-check.sh
        ./scripts/monitoring/health-check.sh full

    - name: Run staging smoke tests
      run: npm run test:e2e:smoke

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, build-and-test, deploy-staging]
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true' && (github.event.inputs.environment == 'production' || github.event.inputs.environment == '')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install production dependencies
      run: npm ci --production

    - name: Setup production environment
      run: |
        cat << EOF > .env.production
        NODE_ENV=production
        DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}
        REDIS_URL=${{ secrets.PROD_REDIS_URL }}
        NEXTAUTH_SECRET=${{ secrets.PROD_AUTH_SECRET }}
        NEXTAUTH_URL=${{ secrets.PROD_AUTH_URL }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        OPENAI_ORGANIZATION=${{ secrets.OPENAI_ORGANIZATION }}
        ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
        EXA_API_KEY=${{ secrets.EXA_API_KEY }}
        FIRECRAWL_API_KEY=${{ secrets.FIRECRAWL_API_KEY }}
        AI_ENABLE_CACHING=true
        AI_ENABLE_METRICS=true
        AI_ENABLE_AUDIT_LOGGING=true
        AI_LOG_LEVEL=info
        AI_ENCRYPTION_KEY=${{ secrets.AI_ENCRYPTION_KEY }}
        EOF

    - name: Run database migrations
      run: |
        chmod +x scripts/deployment/database-migrate.sh
        ./scripts/deployment/database-migrate.sh migrate

    - name: Deploy to production
      run: |
        chmod +x scripts/deployment/production-deploy.sh
        ./scripts/deployment/production-deploy.sh deploy

    - name: Run production health checks
      run: |
        chmod +x scripts/monitoring/health-check.sh
        ./scripts/monitoring/health-check.sh full

    - name: Configure feature flags
      run: |
        # Enable AI search feature for internal users first (5% rollout)
        curl -X POST "${{ secrets.PROD_API_URL }}/api/feature-flags/ai-search" \
          -H "Authorization: Bearer ${{ secrets.PROD_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "enabled": true,
            "rollout_percentage": 5,
            "user_segments": ["internal"],
            "description": "AI Search Feature - Initial Rollout"
          }'

    - name: Run cost monitoring
      run: |
        chmod +x scripts/monitoring/cost-monitor.sh
        ./scripts/monitoring/cost-monitor.sh full

  # Rollback if needed
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true' && github.event.inputs.rollback == 'true'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup production environment
      run: |
        cat << EOF > .env.production
        NODE_ENV=production
        DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}
        REDIS_URL=${{ secrets.PROD_REDIS_URL }}
        NEXTAUTH_SECRET=${{ secrets.PROD_AUTH_SECRET }}
        NEXTAUTH_URL=${{ secrets.PROD_AUTH_URL }}
        EOF

    - name: Rollback production deployment
      run: |
        chmod +x scripts/deployment/production-deploy.sh
        ./scripts/deployment/production-deploy.sh rollback

    - name: Disable AI search feature flag
      run: |
        curl -X POST "${{ secrets.PROD_API_URL }}/api/feature-flags/ai-search" \
          -H "Authorization: Bearer ${{ secrets.PROD_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "enabled": false,
            "description": "AI Search Feature - Disabled due to rollback"
          }'

  # Post-deployment monitoring
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Wait for deployment to stabilize
      run: sleep 300  # Wait 5 minutes

    - name: Run comprehensive health checks
      run: |
        chmod +x scripts/monitoring/health-check.sh
        ./scripts/monitoring/health-check.sh full

    - name: Run cost monitoring
      run: |
        chmod +x scripts/monitoring/cost-monitor.sh
        ./scripts/monitoring/cost-monitor.sh full

    - name: Send deployment notification
      run: |
        curl -X POST "${{ secrets.DEPLOYMENT_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d "{
            \"status\": \"success\",
            \"environment\": \"production\",
            \"version\": \"${{ needs.pre-deployment-checks.outputs.deploy_version }}\",
            \"feature\": \"ai-search\",
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"repository\": \"${{ github.repository }}\",
            \"commit\": \"${{ github.sha }}\",
            \"actor\": \"${{ github.actor }}\"
          }"

  # Deployment failure handling
  deployment-failure:
    name: Deployment Failure Handling
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-monitoring]
    if: always() && (needs.deploy-production.result == 'failure' || needs.post-deployment-monitoring.result == 'failure')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Automatic rollback on failure
      run: |
        chmod +x scripts/deployment/production-deploy.sh
        ./scripts/deployment/production-deploy.sh rollback

    - name: Send failure notification
      run: |
        curl -X POST "${{ secrets.DEPLOYMENT_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d "{
            \"status\": \"failure\",
            \"environment\": \"production\",
            \"version\": \"${{ needs.pre-deployment-checks.outputs.deploy_version }}\",
            \"feature\": \"ai-search\",
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"repository\": \"${{ github.repository }}\",
            \"commit\": \"${{ github.sha }}\",
            \"actor\": \"${{ github.actor }}\",
            \"rollback\": true
          }"

    - name: Create issue for investigation
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Production Deployment Failed - AI Search Feature`,
            body: `## Production Deployment Failure
            
            **Deployment Details:**
            - Version: ${{ needs.pre-deployment-checks.outputs.deploy_version }}
            - Commit: ${{ github.sha }}
            - Actor: ${{ github.actor }}
            - Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)
            
            **Failure Information:**
            - Automatic rollback has been initiated
            - Feature flag has been disabled
            - Investigation required
            
            **Next Steps:**
            1. Review deployment logs
            2. Analyze failure root cause
            3. Fix issues and redeploy
            4. Monitor closely after redeployment
            
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            `,
            labels: ['bug', 'urgent', 'production']
          })